*** GDScript ***

  ** Resumo **
	  - Se baseia sobre funções, igual a JS.
		- Sintaxe é muito parecida com Python.
		- Baseada em identação, que nem no Python.
		
	** Funções Padrões **
	  - hide(), esconde uma entidade.
		- show(), mostra uma entidade.
		- rotate(radiano), roda no próprio eixo a sprite, tens que ser mandado o número em radiano que você quer rodar, ex: 0.3.
		- move_local_x(pixels), move o personagem no eixo X um número de pixels, tens que mandar o número de pixels que ele irá se mover, ex: 5.
		- move_local_y(pixels), move o personagem no eixo Y um número de pixels, tens que mandar o número de pixels que ele irá se mover, ex: 5. Números positivos movem para baixo, e negativos para cima.
		- move_forward(pixels), move o personagem para frente o número de pixels.
		- turn_right(degrees), faz o personagem virar para a direita o número do angulo.
		- turn_left(degrees), faz o personagem virar para a esquerda o número do angulo.
		- jump(pixelsEixoX, pixelsEixoY), faz o personagem dar um pulo para um determinado ponto definido pelos pixels.
		- print(), mostra algo no console.
		- _process(delta), é a função que gera cada frame do loop do jogo, recebe por parâmetro o valor de delta.
		- Vector2(tamanhoX, tamanhoY), cria um vetor 2D, ou seja, tamanho no eixo X e Y.
		
	** Functions **
	  - Criamos uma função com o nome func.
		"func run():"
		
	** Variáveis **
	  - Usamos var para declarar uma variável:
		"var nome = "Martin""
		- Podemos usar sub-variáveis dentro de uma variável (parecido com objeto):
		"position.x = 200
		 position.y = 250"
		 
  ** Delta **
    - Delta faz a experiência de jogo do game ser consistente independente se a máquina da pessoa ser melhor ou pior.
 	  - Garante que as mudanças de frames do game não tornem o game irreal.
 	  - É o tempo passado desde o frame anterior, em segundos, ou seja, uma diferença de tempo.
 	  - Se pegarmos a velocidade angular e multiplicarmos pelo delta, teremos um ângulo.
 	 
  ** Condicionais **
    - Usamos if assim:
 	  "if health > 100:"
 	  - Usamos o else assim:
 	  "else:"
    - A palavra "in" serve para verificar se um valor existe em um array:
    "if cell in units:"
 	 
  ** Loops **
    - While:
    "while true:"
    - For:
    "for i in range(3):" Roda 3 vezes, mas i começa com o valor 0
    - For com Array:
    "for i in numbers:"
    
  ** Arrays **
    - Igual ao JS:
    "var array = [1, 2, 3]"
    - array.append(value), inclui um registro no array.